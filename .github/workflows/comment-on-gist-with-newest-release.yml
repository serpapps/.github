name: Comment on Gist with Latest Release

'on':
  workflow_call:
    inputs:
      gist_id:
        description: 'The ID of the gist to comment on'
        required: true
        type: string
    secrets:
      GH_PAT:
        description: 'GitHub PAT with gist write access'
        required: true

jobs:
  comment-on-gist:
    runs-on: ubuntu-latest

    steps:
      - name: Get latest release content
        id: get_content
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Fetch latest release content
          RELEASE_BODY=$(gh api repos/${{ github.repository }}/releases/latest \
            --jq '.body' 2>/dev/null || echo "")
          if [ -z "$RELEASE_BODY" ]; then
            echo "Error: No latest release found in repository" \
              "${{ github.repository }}"
            exit 1
          fi
          echo "$RELEASE_BODY" > /tmp/comment_content.txt

      - name: Post comment to gist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        shell: bash
        run: |
          GIST_ID="${{ inputs.gist_id }}"

          # First, check if the gist exists
          GIST_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/gists/$GIST_ID)

          if [ "$GIST_CHECK" != "200" ]; then
            echo "Error: Gist with ID $GIST_ID not found or not accessible"
            exit 1
          fi

          # Create JSON payload for comment
          jq -Rs '{body: .}' < /tmp/comment_content.txt > \
            /tmp/comment_payload.json

          # Post comment to gist
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/gists/$GIST_ID/comments \
            -d @/tmp/comment_payload.json)

          # Check for API error first
          ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.message // empty')
          if [ -n "$ERROR_MESSAGE" ]; then
            echo "Error posting comment:"
            echo "$RESPONSE" | jq .
            exit 1
          fi

          # Extract comment details
          COMMENT_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          COMMENT_URL=$(echo "$RESPONSE" | jq -r '.html_url // empty')

          # Check if comment was created successfully (ID is required)
          if [ -z "$COMMENT_ID" ] || [ "$COMMENT_ID" = "null" ]; then
            echo "Error posting comment (no comment ID returned):"
            echo "$RESPONSE" | jq .
            exit 1
          fi

          # If html_url is not provided, construct it from the API url
          if [ -z "$COMMENT_URL" ] || [ "$COMMENT_URL" = "null" ]; then
            API_URL=$(echo "$RESPONSE" | jq -r '.url // empty')
            if [ -n "$API_URL" ] && [ "$API_URL" != "null" ]; then
              # Convert API URL to web URL: api.github.com/gists/ID/comments/COMMENT_ID -> gist.github.com/ID#gistcomment-COMMENT_ID
              GIST_ID=$(echo "$API_URL" | sed 's|.*/gists/\([^/]*\)/.*|\1|')
              COMMENT_URL="https://gist.github.com/${GIST_ID}#gistcomment-${COMMENT_ID}"
            else
              COMMENT_URL="(URL not available)"
            fi
          fi

          echo "‚úÖ Comment posted successfully!"
          echo "üí¨ Comment URL: $COMMENT_URL"
          echo "üÜî Comment ID: $COMMENT_ID"
          echo "üìù Gist ID: $GIST_ID"
